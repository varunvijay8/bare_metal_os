
task_scheduler_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001190  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013e8  080013e8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  080013e8  080013e8  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013e8  080013e8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013e8  080013e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080013f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          0000003c  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000027f7  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000831  00000000  00000000  000228df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00023110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00023308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002db4  00000000  00000000  000234b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a0c  00000000  00000000  0002626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009f5b  00000000  00000000  00027c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031bd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d20  00000000  00000000  00031c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001320 	.word	0x08001320

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200000bc 	.word	0x200000bc
 80001e4:	08001320 	.word	0x08001320

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <led_off+0x30>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <init_systick_timer>:

/**
 * Enables the systick timer with counter value in tick_hz
 *
 */
void init_systick_timer(uint32_t tick_hz) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

	uint32_t count = SYST_CLK/tick_hz;
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <init_systick_timer+0x44>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002d0:	60fb      	str	r3, [r7, #12]

	SYST_RVR &= ~(0x00FFFFFF);		// clear
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <init_systick_timer+0x48>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <init_systick_timer+0x48>)
 80002d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80002dc:	6013      	str	r3, [r2, #0]
	SYST_RVR |= (count-1);			// load reload value register with count-1
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <init_systick_timer+0x48>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <init_systick_timer+0x48>)
 80002e8:	4313      	orrs	r3, r2
 80002ea:	600b      	str	r3, [r1, #0]

	SYST_CSR |= (SYST_CSR_CLKSRC_MASK | SYST_CSR_TICKINIT_MASK | SYST_CSR_ENABLE_MASK);	// enable and fire systick timer
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <init_systick_timer+0x4c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <init_systick_timer+0x4c>)
 80002f2:	f043 0307 	orr.w	r3, r3, #7
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	00f42400 	.word	0x00f42400
 8000308:	e000e014 	.word	0xe000e014
 800030c:	e000e010 	.word	0xe000e010

08000310 <update_current_task>:

/**
 * Update current_task to next valid task (Round Robin)
 *
 */
void update_current_task(void) {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
	int numberOfBlockedTasks = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]

	// if all tasks other than idle task is blocked
	// we run idle task
	while(numberOfBlockedTasks < NUMBER_OF_TASKS-1) {
 800031a:	e022      	b.n	8000362 <update_current_task+0x52>
		current_task = (current_task + 1) % NUMBER_OF_TASKS;
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <update_current_task+0x74>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	1c5a      	adds	r2, r3, #1
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <update_current_task+0x78>)
 8000324:	fb83 1302 	smull	r1, r3, r3, r2
 8000328:	1059      	asrs	r1, r3, #1
 800032a:	17d3      	asrs	r3, r2, #31
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	460b      	mov	r3, r1
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	440b      	add	r3, r1
 8000334:	1ad1      	subs	r1, r2, r3
 8000336:	b2ca      	uxtb	r2, r1
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <update_current_task+0x74>)
 800033a:	701a      	strb	r2, [r3, #0]
		if(current_task == 0) {
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <update_current_task+0x74>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d102      	bne.n	800034a <update_current_task+0x3a>
			current_task = 1;	// skip idle task
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <update_current_task+0x74>)
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
								// we run idle task only when all others are blocked
		}

		if(taskTCBs[current_task].run_state == TASK_BLOCKED_STATE) {
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <update_current_task+0x74>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4a0f      	ldr	r2, [pc, #60]	; (800038c <update_current_task+0x7c>)
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	4413      	add	r3, r2
 8000354:	3308      	adds	r3, #8
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d106      	bne.n	800036a <update_current_task+0x5a>
			++numberOfBlockedTasks;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
	while(numberOfBlockedTasks < NUMBER_OF_TASKS-1) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b03      	cmp	r3, #3
 8000366:	ddd9      	ble.n	800031c <update_current_task+0xc>
 8000368:	e000      	b.n	800036c <update_current_task+0x5c>
		}
		else {
			break;
 800036a:	bf00      	nop
		}
	}

	// if all tasks are blocked we run the idle task
	if(numberOfBlockedTasks == NUMBER_OF_TASKS-1) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b04      	cmp	r3, #4
 8000370:	d102      	bne.n	8000378 <update_current_task+0x68>
		current_task = 0;
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <update_current_task+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
	}

}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	20000050 	.word	0x20000050
 8000388:	66666667 	.word	0x66666667
 800038c:	20000000 	.word	0x20000000

08000390 <idle_task>:

void idle_task(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	while(1) {
		printf("In idle task.\n");
 8000394:	4801      	ldr	r0, [pc, #4]	; (800039c <idle_task+0xc>)
 8000396:	f000 fb6b 	bl	8000a70 <puts>
 800039a:	e7fb      	b.n	8000394 <idle_task+0x4>
 800039c:	08001338 	.word	0x08001338

080003a0 <task1_handler>:
	}
}

void task1_handler(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

	while(1) {
		led_on(LED_GREEN);
 80003a4:	200c      	movs	r0, #12
 80003a6:	f7ff ff59 	bl	800025c <led_on>
		task_delay(DELAY_COUNT_1S);
 80003aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ae:	f000 f92b 	bl	8000608 <task_delay>
		led_off(LED_GREEN);
 80003b2:	200c      	movs	r0, #12
 80003b4:	f7ff ff6a 	bl	800028c <led_off>
		task_delay(DELAY_COUNT_1S);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f000 f924 	bl	8000608 <task_delay>
		led_on(LED_GREEN);
 80003c0:	e7f0      	b.n	80003a4 <task1_handler+0x4>

080003c2 <task2_handler>:
	}
}

void task2_handler(void) {
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0

	while(1) {
		led_on(LED_ORANGE);
 80003c6:	200d      	movs	r0, #13
 80003c8:	f7ff ff48 	bl	800025c <led_on>
		task_delay(DELAY_COUNT_500MS);
 80003cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d0:	f000 f91a 	bl	8000608 <task_delay>
		led_off(LED_ORANGE);
 80003d4:	200d      	movs	r0, #13
 80003d6:	f7ff ff59 	bl	800028c <led_off>
		task_delay(DELAY_COUNT_500MS);
 80003da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003de:	f000 f913 	bl	8000608 <task_delay>
		led_on(LED_ORANGE);
 80003e2:	e7f0      	b.n	80003c6 <task2_handler+0x4>

080003e4 <task3_handler>:
	}
}

void task3_handler(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

	while(1) {
		led_on(LED_RED);
 80003e8:	200e      	movs	r0, #14
 80003ea:	f7ff ff37 	bl	800025c <led_on>
		task_delay(DELAY_COUNT_250MS);
 80003ee:	20fa      	movs	r0, #250	; 0xfa
 80003f0:	f000 f90a 	bl	8000608 <task_delay>
		led_off(LED_RED);
 80003f4:	200e      	movs	r0, #14
 80003f6:	f7ff ff49 	bl	800028c <led_off>
		task_delay(DELAY_COUNT_250MS);
 80003fa:	20fa      	movs	r0, #250	; 0xfa
 80003fc:	f000 f904 	bl	8000608 <task_delay>
		led_on(LED_RED);
 8000400:	e7f2      	b.n	80003e8 <task3_handler+0x4>

08000402 <task4_handler>:
	}
}

void task4_handler(void) {
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0

	while(1) {
		led_on(LED_BLUE);
 8000406:	200f      	movs	r0, #15
 8000408:	f7ff ff28 	bl	800025c <led_on>
		task_delay(DELAY_COUNT_125MS);
 800040c:	207d      	movs	r0, #125	; 0x7d
 800040e:	f000 f8fb 	bl	8000608 <task_delay>
		led_off(LED_BLUE);
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff ff3a 	bl	800028c <led_off>
		task_delay(DELAY_COUNT_125MS);
 8000418:	207d      	movs	r0, #125	; 0x7d
 800041a:	f000 f8f5 	bl	8000608 <task_delay>
		led_on(LED_BLUE);
 800041e:	e7f2      	b.n	8000406 <task4_handler+0x4>

08000420 <init_scheduler_stack>:
 *       unstacking
 */
__attribute__ ((naked)) void init_scheduler_stack(uint32_t top_of_sched_stack) {

	// init MSP with R0 which contains top_of_sched_stack
	__asm volatile("MSR MSP, R0");
 8000420:	f380 8808 	msr	MSP, r0

	// switch to MSP
	__asm volatile("MRS R1, CONTROL");
 8000424:	f3ef 8114 	mrs	r1, CONTROL
	__asm volatile("BIC R0, R1, #2");	// clear SPSEL
 8000428:	f021 0002 	bic.w	r0, r1, #2
	__asm volatile("MSR CONTROL, R0");
 800042c:	f380 8814 	msr	CONTROL, r0

	// return since there is no prologue
	__asm volatile("BX LR");
 8000430:	4770      	bx	lr
}
 8000432:	bf00      	nop

08000434 <init_tasks_stack>:

/**
 * Initialize stack of the tasks
 *
 */
void init_tasks_stack(void) {
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0

	for(uint32_t task = 0; task < NUMBER_OF_TASKS; task++) {
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	e05b      	b.n	80004f8 <init_tasks_stack+0xc4>

		// set T-bit in xPSR
		--taskTCBs[task].task_psp;
 8000440:	4a32      	ldr	r2, [pc, #200]	; (800050c <init_tasks_stack+0xd8>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	011b      	lsls	r3, r3, #4
 8000446:	4413      	add	r3, r2
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	1f1a      	subs	r2, r3, #4
 800044c:	492f      	ldr	r1, [pc, #188]	; (800050c <init_tasks_stack+0xd8>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	440b      	add	r3, r1
 8000454:	601a      	str	r2, [r3, #0]
		*taskTCBs[task].task_psp = INIT_xPSR_VALUE;
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <init_tasks_stack+0xd8>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4413      	add	r3, r2
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000464:	601a      	str	r2, [r3, #0]

		// task address
		--taskTCBs[task].task_psp;
 8000466:	4a29      	ldr	r2, [pc, #164]	; (800050c <init_tasks_stack+0xd8>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	011b      	lsls	r3, r3, #4
 800046c:	4413      	add	r3, r2
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	1f1a      	subs	r2, r3, #4
 8000472:	4926      	ldr	r1, [pc, #152]	; (800050c <init_tasks_stack+0xd8>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	011b      	lsls	r3, r3, #4
 8000478:	440b      	add	r3, r1
 800047a:	601a      	str	r2, [r3, #0]
		*taskTCBs[task].task_psp = (uint32_t)taskTCBs[task].task_handler;// + INIT_T_BIT_IN_PC;
 800047c:	4a23      	ldr	r2, [pc, #140]	; (800050c <init_tasks_stack+0xd8>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	4413      	add	r3, r2
 8000484:	330c      	adds	r3, #12
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <init_tasks_stack+0xd8>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	4413      	add	r3, r2
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	460a      	mov	r2, r1
 8000494:	601a      	str	r2, [r3, #0]

		// LR to return to thread mode with PSP
		--taskTCBs[task].task_psp;
 8000496:	4a1d      	ldr	r2, [pc, #116]	; (800050c <init_tasks_stack+0xd8>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	011b      	lsls	r3, r3, #4
 800049c:	4413      	add	r3, r2
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	1f1a      	subs	r2, r3, #4
 80004a2:	491a      	ldr	r1, [pc, #104]	; (800050c <init_tasks_stack+0xd8>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	011b      	lsls	r3, r3, #4
 80004a8:	440b      	add	r3, r1
 80004aa:	601a      	str	r2, [r3, #0]
		*taskTCBs[task].task_psp = INIT_LR_VALUE;
 80004ac:	4a17      	ldr	r2, [pc, #92]	; (800050c <init_tasks_stack+0xd8>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	4413      	add	r3, r2
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f06f 0202 	mvn.w	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]

		// init R0-R12
		for(uint32_t gpr = 0; gpr < NUMBER_OF_GP_REG; gpr++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	e014      	b.n	80004ec <init_tasks_stack+0xb8>
			--taskTCBs[task].task_psp;
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <init_tasks_stack+0xd8>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	011b      	lsls	r3, r3, #4
 80004c8:	4413      	add	r3, r2
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	1f1a      	subs	r2, r3, #4
 80004ce:	490f      	ldr	r1, [pc, #60]	; (800050c <init_tasks_stack+0xd8>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	440b      	add	r3, r1
 80004d6:	601a      	str	r2, [r3, #0]
			*taskTCBs[task].task_psp = 0;
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <init_tasks_stack+0xd8>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	4413      	add	r3, r2
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		for(uint32_t gpr = 0; gpr < NUMBER_OF_GP_REG; gpr++) {
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	2b0c      	cmp	r3, #12
 80004f0:	d9e7      	bls.n	80004c2 <init_tasks_stack+0x8e>
	for(uint32_t task = 0; task < NUMBER_OF_TASKS; task++) {
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d9a0      	bls.n	8000440 <init_tasks_stack+0xc>
		}

	}

}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20000000 	.word	0x20000000

08000510 <enable_processor_faults>:

/**
 * Enable processor faults
 *
 */
void enable_processor_faults(void) {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

	// 1. enable all configurable exceptions
	//		usage, mem manage and bus fault
	SHCRS |= (USAGE_FLT_MASK | BUS_FLT_MASK | MEM_FLT_MASK);
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <enable_processor_faults+0x28>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <enable_processor_faults+0x28>)
 800051a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800051e:	6013      	str	r3, [r2, #0]
	CCR |= DIV_BY_ZERO_MASK;	// Divide by zero
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <enable_processor_faults+0x2c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <enable_processor_faults+0x2c>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]

}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed24 	.word	0xe000ed24
 800053c:	e000ed14 	.word	0xe000ed14

08000540 <get_psp_value>:

/**
 * Get PSP of current task
 */
uint32_t get_psp_value(void){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	return (uint32_t)taskTCBs[current_task].task_psp;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <get_psp_value+0x1c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <get_psp_value+0x20>)
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000050 	.word	0x20000050
 8000560:	20000000 	.word	0x20000000

08000564 <save_psp_value>:

/**
 * Save PSP of current task
 *
 */
void save_psp_value(uint32_t task_psp) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	taskTCBs[current_task].task_psp = (uint32_t*)task_psp;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <save_psp_value+0x24>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4906      	ldr	r1, [pc, #24]	; (800058c <save_psp_value+0x28>)
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	440b      	add	r3, r1
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000050 	.word	0x20000050
 800058c:	20000000 	.word	0x20000000

08000590 <switch_sp_to_psp>:
__attribute__ ((naked)) void switch_sp_to_psp(void) {

	//1. init PSP with task 1 stack address
//	uint32_t task1_psp = (uint32_t)get_psp_value();
//	__asm volatile("MOV R0, %0"::"r"(task1_psp):);
	__asm volatile("PUSH {LR}");		// save LR before jumping to get_psp_value
 8000590:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000592:	f7ff ffd5 	bl	8000540 <get_psp_value>
	__asm volatile("MSR PSP, R0");		// RO will have the SP of task1 as return
 8000596:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");			// restore LR
 800059a:	f85d eb04 	ldr.w	lr, [sp], #4


	//2. change SP to PSP using control register
	__asm volatile("MRS R1, CONTROL");
 800059e:	f3ef 8114 	mrs	r1, CONTROL
	__asm volatile("ORR R1, R1, #0x2");
 80005a2:	f041 0102 	orr.w	r1, r1, #2
	__asm volatile("MSR CONTROL, R1");
 80005a6:	f381 8814 	msr	CONTROL, r1

	__asm volatile("BX LR");
 80005aa:	4770      	bx	lr
}
 80005ac:	bf00      	nop
	...

080005b0 <main>:

int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80005b4:	f7ff ffac 	bl	8000510 <enable_processor_faults>

	led_init_all();
 80005b8:	f7ff fe16 	bl	80001e8 <led_init_all>

	init_scheduler_stack(SCHED_STACK_START);
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <main+0x30>)
 80005be:	f7ff ff2f 	bl	8000420 <init_scheduler_stack>
	init_tasks_stack();
 80005c2:	f7ff ff37 	bl	8000434 <init_tasks_stack>

	g_tick_count = 0;	// init global tick count
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <main+0x34>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
	init_systick_timer(TICK_HZ);
 80005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d0:	f7ff fe76 	bl	80002c0 <init_systick_timer>

	switch_sp_to_psp();
 80005d4:	f7ff ffdc 	bl	8000590 <switch_sp_to_psp>
	task1_handler();
 80005d8:	f7ff fee2 	bl	80003a0 <task1_handler>

    /* Loop forever */
	for(;;);
 80005dc:	e7fe      	b.n	80005dc <main+0x2c>
 80005de:	bf00      	nop
 80005e0:	2001f000 	.word	0x2001f000
 80005e4:	200000e0 	.word	0x200000e0

080005e8 <schedule>:
}

/**
 * Schedule next ready task to run
 */
void schedule(void) {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	/**
	 * Set PendSV
	 */
	ICSR |= ICSR_PENDSVSET_MASK;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <schedule+0x1c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <schedule+0x1c>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed04 	.word	0xe000ed04

08000608 <task_delay>:
/**
 * Block current task for tick_count(ms) and yield
 *
 * note: function is atomic since we are accessing global data
 */
void task_delay(uint32_t tick_count) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

	// disable interrupt
	INTERRUPT_DISABLE();
 8000610:	f04f 0001 	mov.w	r0, #1
 8000614:	f380 8810 	msr	PRIMASK, r0

	/**
	 * Delay not applicable for idle task
	 */
	if (current_task) {
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <task_delay+0x54>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d015      	beq.n	800064c <task_delay+0x44>
		taskTCBs[current_task].block_count = g_tick_count + tick_count;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <task_delay+0x58>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <task_delay+0x54>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	441a      	add	r2, r3
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <task_delay+0x5c>)
 8000630:	0103      	lsls	r3, r0, #4
 8000632:	440b      	add	r3, r1
 8000634:	3304      	adds	r3, #4
 8000636:	601a      	str	r2, [r3, #0]
		taskTCBs[current_task].run_state = TASK_BLOCKED_STATE;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <task_delay+0x54>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <task_delay+0x5c>)
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	4413      	add	r3, r2
 8000642:	3308      	adds	r3, #8
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]

		/**
		 * Schedule next ready task to run
		 *
		 */
		schedule();
 8000648:	f7ff ffce 	bl	80005e8 <schedule>
	}

	// enable interrupt
	INTERRUPT_ENABLE();
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	f380 8810 	msr	PRIMASK, r0
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000050 	.word	0x20000050
 8000660:	200000e0 	.word	0x200000e0
 8000664:	20000000 	.word	0x20000000

08000668 <PendSV_Handler>:
	 * 2. Save SF2 using PSP (we cannot use push since we are in MSP)
	 * 	  Use STMDB (decrements before pushing which is similar to
	 * 	  stacking)
	 * 3. Save PSP to "taskTCBs[current_task].task_psp"
	 */
	__asm volatile("MRS R0, PSP");
 8000668:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!, {R4-R11}");
 800066c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");			// was missing in initial implementation
 8000670:	b500      	push	{lr}
											// which led to HardFault, we need to save
											// and restore exec_return value
	__asm volatile("BL save_psp_value");	// R0 has the updated SP value after
 8000672:	f7ff ff77 	bl	8000564 <save_psp_value>
	 * 1. Decide next task to run
	 * 2. Get saved PSP of next task
	 * 3. Restore SF2 using PSP
	 * 4. Update PSP and exit
	 */
	__asm volatile("BL update_current_task");
 8000676:	f7ff fe4b 	bl	8000310 <update_current_task>
	__asm volatile("BL get_psp_value");
 800067a:	f7ff ff61 	bl	8000540 <get_psp_value>
	__asm volatile("LDMIA R0!, {R4-R11}");		// R0 has SP of next task
 800067e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP, R0");
 8000682:	f380 8809 	msr	PSP, r0

	// exit will automatically restore SF1
	__asm volatile("POP {LR}");
 8000686:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800068a:	4770      	bx	lr

}
 800068c:	bf00      	nop
	...

08000690 <unblock_tasks>:

/**
 * Unblock tasks whose delay has expired
 */
void unblock_tasks(void) {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0

	for(uint32_t task = 1; task < NUMBER_OF_TASKS; task++) {
 8000696:	2301      	movs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e01b      	b.n	80006d4 <unblock_tasks+0x44>

		if( (taskTCBs[task].run_state == TASK_BLOCKED_STATE) &&
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <unblock_tasks+0x58>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4413      	add	r3, r2
 80006a4:	3308      	adds	r3, #8
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d110      	bne.n	80006ce <unblock_tasks+0x3e>
				(taskTCBs[task].block_count <= g_tick_count)) {
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <unblock_tasks+0x58>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	4413      	add	r3, r2
 80006b4:	3304      	adds	r3, #4
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <unblock_tasks+0x5c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
		if( (taskTCBs[task].run_state == TASK_BLOCKED_STATE) &&
 80006bc:	429a      	cmp	r2, r3
 80006be:	d806      	bhi.n	80006ce <unblock_tasks+0x3e>

			taskTCBs[task].run_state = TASK_READY_STATE;
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	for(uint32_t task = 1; task < NUMBER_OF_TASKS; task++) {
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d9e0      	bls.n	800069c <unblock_tasks+0xc>
		}
	}
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000000 	.word	0x20000000
 80006ec:	200000e0 	.word	0x200000e0

080006f0 <SysTick_Handler>:
 * - Decide which task to run next
 * - Set PendSV to handle context switch
 *
 * note: implemented as naked
 */
void SysTick_Handler(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

	/**
	 * Increment global tick count every ms
	 */
	__asm volatile("ADD R0, %0, #1"::"r"(g_tick_count):);
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SysTick_Handler+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f103 0001 	add.w	r0, r3, #1
	__asm volatile("MOV %0, R0":"=r"(g_tick_count)::);
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <SysTick_Handler+0x20>)
 8000700:	6013      	str	r3, [r2, #0]

	/**
	 * Unblock tasks whose delay has expired
	 */
	unblock_tasks();
 8000702:	f7ff ffc5 	bl	8000690 <unblock_tasks>

	/**
	 * Schedule next ready task to run
	 *
	 */
	schedule();
 8000706:	f7ff ff6f 	bl	80005e8 <schedule>

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000e0 	.word	0x200000e0

08000714 <HardFault_Handler>:

void HardFault_Handler(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	printf("HardFault_Handler. \n");
 8000718:	4801      	ldr	r0, [pc, #4]	; (8000720 <HardFault_Handler+0xc>)
 800071a:	f000 f9a9 	bl	8000a70 <puts>

	/* Loop forever */
	for(;;);
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0xa>
 8000720:	08001348 	.word	0x08001348

08000724 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	printf("MemManage_Handler. \n");
 8000728:	4801      	ldr	r0, [pc, #4]	; (8000730 <MemManage_Handler+0xc>)
 800072a:	f000 f9a1 	bl	8000a70 <puts>

	/* Loop forever */
	for(;;);
 800072e:	e7fe      	b.n	800072e <MemManage_Handler+0xa>
 8000730:	0800135c 	.word	0x0800135c

08000734 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	printf("BusFault_Handler. \n");
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <BusFault_Handler+0xc>)
 800073a:	f000 f999 	bl	8000a70 <puts>

	/* Loop forever */
	for(;;);
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0xa>
 8000740:	08001370 	.word	0x08001370

08000744 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <ITM_SendChar+0x48>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <ITM_SendChar+0x48>)
 8000754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000758:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <ITM_SendChar+0x4c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <ITM_SendChar+0x4c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000766:	bf00      	nop
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0f8      	beq.n	8000768 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000776:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	6013      	str	r3, [r2, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000edfc 	.word	0xe000edfc
 8000790:	e0000e00 	.word	0xe0000e00

08000794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a6:	f3af 8000 	nop.w
 80007aa:	4601      	mov	r1, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf0      	blt.n	80007a6 <_read+0x12>
	}

return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	e009      	b.n	80007f4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ffab 	bl	8000744 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf1      	blt.n	80007e0 <_write+0x12>
	}
	return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_close>:

int _close(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	return -1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800082e:	605a      	str	r2, [r3, #4]
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_isatty>:

int _isatty(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <_sbrk+0x5c>)
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <_sbrk+0x60>)
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_sbrk+0x64>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <_sbrk+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d207      	bcs.n	80008b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a0:	f000 f846 	bl	8000930 <__errno>
 80008a4:	4603      	mov	r3, r0
 80008a6:	220c      	movs	r2, #12
 80008a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ae:	e009      	b.n	80008c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <_sbrk+0x64>)
 80008c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20020000 	.word	0x20020000
 80008d0:	00000400 	.word	0x00000400
 80008d4:	200000d4 	.word	0x200000d4
 80008d8:	200000f8 	.word	0x200000f8

080008dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090a:	f000 f817 	bl	800093c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fe4f 	bl	80005b0 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000920:	080013f0 	.word	0x080013f0
  ldr r2, =_sbss
 8000924:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000928:	200000f4 	.word	0x200000f4

0800092c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <__errno>:
 8000930:	4b01      	ldr	r3, [pc, #4]	; (8000938 <__errno+0x8>)
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000054 	.word	0x20000054

0800093c <__libc_init_array>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4d0d      	ldr	r5, [pc, #52]	; (8000974 <__libc_init_array+0x38>)
 8000940:	4c0d      	ldr	r4, [pc, #52]	; (8000978 <__libc_init_array+0x3c>)
 8000942:	1b64      	subs	r4, r4, r5
 8000944:	10a4      	asrs	r4, r4, #2
 8000946:	2600      	movs	r6, #0
 8000948:	42a6      	cmp	r6, r4
 800094a:	d109      	bne.n	8000960 <__libc_init_array+0x24>
 800094c:	4d0b      	ldr	r5, [pc, #44]	; (800097c <__libc_init_array+0x40>)
 800094e:	4c0c      	ldr	r4, [pc, #48]	; (8000980 <__libc_init_array+0x44>)
 8000950:	f000 fce6 	bl	8001320 <_init>
 8000954:	1b64      	subs	r4, r4, r5
 8000956:	10a4      	asrs	r4, r4, #2
 8000958:	2600      	movs	r6, #0
 800095a:	42a6      	cmp	r6, r4
 800095c:	d105      	bne.n	800096a <__libc_init_array+0x2e>
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f855 3b04 	ldr.w	r3, [r5], #4
 8000964:	4798      	blx	r3
 8000966:	3601      	adds	r6, #1
 8000968:	e7ee      	b.n	8000948 <__libc_init_array+0xc>
 800096a:	f855 3b04 	ldr.w	r3, [r5], #4
 800096e:	4798      	blx	r3
 8000970:	3601      	adds	r6, #1
 8000972:	e7f2      	b.n	800095a <__libc_init_array+0x1e>
 8000974:	080013e8 	.word	0x080013e8
 8000978:	080013e8 	.word	0x080013e8
 800097c:	080013e8 	.word	0x080013e8
 8000980:	080013ec 	.word	0x080013ec

08000984 <memset>:
 8000984:	4402      	add	r2, r0
 8000986:	4603      	mov	r3, r0
 8000988:	4293      	cmp	r3, r2
 800098a:	d100      	bne.n	800098e <memset+0xa>
 800098c:	4770      	bx	lr
 800098e:	f803 1b01 	strb.w	r1, [r3], #1
 8000992:	e7f9      	b.n	8000988 <memset+0x4>

08000994 <_puts_r>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	460e      	mov	r6, r1
 8000998:	4605      	mov	r5, r0
 800099a:	b118      	cbz	r0, 80009a4 <_puts_r+0x10>
 800099c:	6983      	ldr	r3, [r0, #24]
 800099e:	b90b      	cbnz	r3, 80009a4 <_puts_r+0x10>
 80009a0:	f000 fa48 	bl	8000e34 <__sinit>
 80009a4:	69ab      	ldr	r3, [r5, #24]
 80009a6:	68ac      	ldr	r4, [r5, #8]
 80009a8:	b913      	cbnz	r3, 80009b0 <_puts_r+0x1c>
 80009aa:	4628      	mov	r0, r5
 80009ac:	f000 fa42 	bl	8000e34 <__sinit>
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <_puts_r+0xd0>)
 80009b2:	429c      	cmp	r4, r3
 80009b4:	d120      	bne.n	80009f8 <_puts_r+0x64>
 80009b6:	686c      	ldr	r4, [r5, #4]
 80009b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009ba:	07db      	lsls	r3, r3, #31
 80009bc:	d405      	bmi.n	80009ca <_puts_r+0x36>
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	0598      	lsls	r0, r3, #22
 80009c2:	d402      	bmi.n	80009ca <_puts_r+0x36>
 80009c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009c6:	f000 fad3 	bl	8000f70 <__retarget_lock_acquire_recursive>
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	0719      	lsls	r1, r3, #28
 80009ce:	d51d      	bpl.n	8000a0c <_puts_r+0x78>
 80009d0:	6923      	ldr	r3, [r4, #16]
 80009d2:	b1db      	cbz	r3, 8000a0c <_puts_r+0x78>
 80009d4:	3e01      	subs	r6, #1
 80009d6:	68a3      	ldr	r3, [r4, #8]
 80009d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009dc:	3b01      	subs	r3, #1
 80009de:	60a3      	str	r3, [r4, #8]
 80009e0:	bb39      	cbnz	r1, 8000a32 <_puts_r+0x9e>
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da38      	bge.n	8000a58 <_puts_r+0xc4>
 80009e6:	4622      	mov	r2, r4
 80009e8:	210a      	movs	r1, #10
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 f848 	bl	8000a80 <__swbuf_r>
 80009f0:	3001      	adds	r0, #1
 80009f2:	d011      	beq.n	8000a18 <_puts_r+0x84>
 80009f4:	250a      	movs	r5, #10
 80009f6:	e011      	b.n	8000a1c <_puts_r+0x88>
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <_puts_r+0xd4>)
 80009fa:	429c      	cmp	r4, r3
 80009fc:	d101      	bne.n	8000a02 <_puts_r+0x6e>
 80009fe:	68ac      	ldr	r4, [r5, #8]
 8000a00:	e7da      	b.n	80009b8 <_puts_r+0x24>
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <_puts_r+0xd8>)
 8000a04:	429c      	cmp	r4, r3
 8000a06:	bf08      	it	eq
 8000a08:	68ec      	ldreq	r4, [r5, #12]
 8000a0a:	e7d5      	b.n	80009b8 <_puts_r+0x24>
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f000 f888 	bl	8000b24 <__swsetup_r>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d0dd      	beq.n	80009d4 <_puts_r+0x40>
 8000a18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a1e:	07da      	lsls	r2, r3, #31
 8000a20:	d405      	bmi.n	8000a2e <_puts_r+0x9a>
 8000a22:	89a3      	ldrh	r3, [r4, #12]
 8000a24:	059b      	lsls	r3, r3, #22
 8000a26:	d402      	bmi.n	8000a2e <_puts_r+0x9a>
 8000a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a2a:	f000 faa2 	bl	8000f72 <__retarget_lock_release_recursive>
 8000a2e:	4628      	mov	r0, r5
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da04      	bge.n	8000a40 <_puts_r+0xac>
 8000a36:	69a2      	ldr	r2, [r4, #24]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dc06      	bgt.n	8000a4a <_puts_r+0xb6>
 8000a3c:	290a      	cmp	r1, #10
 8000a3e:	d004      	beq.n	8000a4a <_puts_r+0xb6>
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	6022      	str	r2, [r4, #0]
 8000a46:	7019      	strb	r1, [r3, #0]
 8000a48:	e7c5      	b.n	80009d6 <_puts_r+0x42>
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f817 	bl	8000a80 <__swbuf_r>
 8000a52:	3001      	adds	r0, #1
 8000a54:	d1bf      	bne.n	80009d6 <_puts_r+0x42>
 8000a56:	e7df      	b.n	8000a18 <_puts_r+0x84>
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	250a      	movs	r5, #10
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	6022      	str	r2, [r4, #0]
 8000a60:	701d      	strb	r5, [r3, #0]
 8000a62:	e7db      	b.n	8000a1c <_puts_r+0x88>
 8000a64:	080013a8 	.word	0x080013a8
 8000a68:	080013c8 	.word	0x080013c8
 8000a6c:	08001388 	.word	0x08001388

08000a70 <puts>:
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <puts+0xc>)
 8000a72:	4601      	mov	r1, r0
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f7ff bf8d 	b.w	8000994 <_puts_r>
 8000a7a:	bf00      	nop
 8000a7c:	20000054 	.word	0x20000054

08000a80 <__swbuf_r>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	460e      	mov	r6, r1
 8000a84:	4614      	mov	r4, r2
 8000a86:	4605      	mov	r5, r0
 8000a88:	b118      	cbz	r0, 8000a92 <__swbuf_r+0x12>
 8000a8a:	6983      	ldr	r3, [r0, #24]
 8000a8c:	b90b      	cbnz	r3, 8000a92 <__swbuf_r+0x12>
 8000a8e:	f000 f9d1 	bl	8000e34 <__sinit>
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <__swbuf_r+0x98>)
 8000a94:	429c      	cmp	r4, r3
 8000a96:	d12b      	bne.n	8000af0 <__swbuf_r+0x70>
 8000a98:	686c      	ldr	r4, [r5, #4]
 8000a9a:	69a3      	ldr	r3, [r4, #24]
 8000a9c:	60a3      	str	r3, [r4, #8]
 8000a9e:	89a3      	ldrh	r3, [r4, #12]
 8000aa0:	071a      	lsls	r2, r3, #28
 8000aa2:	d52f      	bpl.n	8000b04 <__swbuf_r+0x84>
 8000aa4:	6923      	ldr	r3, [r4, #16]
 8000aa6:	b36b      	cbz	r3, 8000b04 <__swbuf_r+0x84>
 8000aa8:	6923      	ldr	r3, [r4, #16]
 8000aaa:	6820      	ldr	r0, [r4, #0]
 8000aac:	1ac0      	subs	r0, r0, r3
 8000aae:	6963      	ldr	r3, [r4, #20]
 8000ab0:	b2f6      	uxtb	r6, r6
 8000ab2:	4283      	cmp	r3, r0
 8000ab4:	4637      	mov	r7, r6
 8000ab6:	dc04      	bgt.n	8000ac2 <__swbuf_r+0x42>
 8000ab8:	4621      	mov	r1, r4
 8000aba:	4628      	mov	r0, r5
 8000abc:	f000 f926 	bl	8000d0c <_fflush_r>
 8000ac0:	bb30      	cbnz	r0, 8000b10 <__swbuf_r+0x90>
 8000ac2:	68a3      	ldr	r3, [r4, #8]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	60a3      	str	r3, [r4, #8]
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	6022      	str	r2, [r4, #0]
 8000ace:	701e      	strb	r6, [r3, #0]
 8000ad0:	6963      	ldr	r3, [r4, #20]
 8000ad2:	3001      	adds	r0, #1
 8000ad4:	4283      	cmp	r3, r0
 8000ad6:	d004      	beq.n	8000ae2 <__swbuf_r+0x62>
 8000ad8:	89a3      	ldrh	r3, [r4, #12]
 8000ada:	07db      	lsls	r3, r3, #31
 8000adc:	d506      	bpl.n	8000aec <__swbuf_r+0x6c>
 8000ade:	2e0a      	cmp	r6, #10
 8000ae0:	d104      	bne.n	8000aec <__swbuf_r+0x6c>
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f911 	bl	8000d0c <_fflush_r>
 8000aea:	b988      	cbnz	r0, 8000b10 <__swbuf_r+0x90>
 8000aec:	4638      	mov	r0, r7
 8000aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <__swbuf_r+0x9c>)
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d101      	bne.n	8000afa <__swbuf_r+0x7a>
 8000af6:	68ac      	ldr	r4, [r5, #8]
 8000af8:	e7cf      	b.n	8000a9a <__swbuf_r+0x1a>
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <__swbuf_r+0xa0>)
 8000afc:	429c      	cmp	r4, r3
 8000afe:	bf08      	it	eq
 8000b00:	68ec      	ldreq	r4, [r5, #12]
 8000b02:	e7ca      	b.n	8000a9a <__swbuf_r+0x1a>
 8000b04:	4621      	mov	r1, r4
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 f80c 	bl	8000b24 <__swsetup_r>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d0cb      	beq.n	8000aa8 <__swbuf_r+0x28>
 8000b10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000b14:	e7ea      	b.n	8000aec <__swbuf_r+0x6c>
 8000b16:	bf00      	nop
 8000b18:	080013a8 	.word	0x080013a8
 8000b1c:	080013c8 	.word	0x080013c8
 8000b20:	08001388 	.word	0x08001388

08000b24 <__swsetup_r>:
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <__swsetup_r+0xcc>)
 8000b26:	b570      	push	{r4, r5, r6, lr}
 8000b28:	681d      	ldr	r5, [r3, #0]
 8000b2a:	4606      	mov	r6, r0
 8000b2c:	460c      	mov	r4, r1
 8000b2e:	b125      	cbz	r5, 8000b3a <__swsetup_r+0x16>
 8000b30:	69ab      	ldr	r3, [r5, #24]
 8000b32:	b913      	cbnz	r3, 8000b3a <__swsetup_r+0x16>
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 f97d 	bl	8000e34 <__sinit>
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <__swsetup_r+0xd0>)
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	d10f      	bne.n	8000b60 <__swsetup_r+0x3c>
 8000b40:	686c      	ldr	r4, [r5, #4]
 8000b42:	89a3      	ldrh	r3, [r4, #12]
 8000b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b48:	0719      	lsls	r1, r3, #28
 8000b4a:	d42c      	bmi.n	8000ba6 <__swsetup_r+0x82>
 8000b4c:	06dd      	lsls	r5, r3, #27
 8000b4e:	d411      	bmi.n	8000b74 <__swsetup_r+0x50>
 8000b50:	2309      	movs	r3, #9
 8000b52:	6033      	str	r3, [r6, #0]
 8000b54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b58:	81a3      	strh	r3, [r4, #12]
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5e:	e03e      	b.n	8000bde <__swsetup_r+0xba>
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <__swsetup_r+0xd4>)
 8000b62:	429c      	cmp	r4, r3
 8000b64:	d101      	bne.n	8000b6a <__swsetup_r+0x46>
 8000b66:	68ac      	ldr	r4, [r5, #8]
 8000b68:	e7eb      	b.n	8000b42 <__swsetup_r+0x1e>
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <__swsetup_r+0xd8>)
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	bf08      	it	eq
 8000b70:	68ec      	ldreq	r4, [r5, #12]
 8000b72:	e7e6      	b.n	8000b42 <__swsetup_r+0x1e>
 8000b74:	0758      	lsls	r0, r3, #29
 8000b76:	d512      	bpl.n	8000b9e <__swsetup_r+0x7a>
 8000b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b7a:	b141      	cbz	r1, 8000b8e <__swsetup_r+0x6a>
 8000b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d002      	beq.n	8000b8a <__swsetup_r+0x66>
 8000b84:	4630      	mov	r0, r6
 8000b86:	f000 fa59 	bl	800103c <_free_r>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b94:	81a3      	strh	r3, [r4, #12]
 8000b96:	2300      	movs	r3, #0
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	6923      	ldr	r3, [r4, #16]
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	81a3      	strh	r3, [r4, #12]
 8000ba6:	6923      	ldr	r3, [r4, #16]
 8000ba8:	b94b      	cbnz	r3, 8000bbe <__swsetup_r+0x9a>
 8000baa:	89a3      	ldrh	r3, [r4, #12]
 8000bac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb4:	d003      	beq.n	8000bbe <__swsetup_r+0x9a>
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	4630      	mov	r0, r6
 8000bba:	f000 f9ff 	bl	8000fbc <__smakebuf_r>
 8000bbe:	89a0      	ldrh	r0, [r4, #12]
 8000bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bc4:	f010 0301 	ands.w	r3, r0, #1
 8000bc8:	d00a      	beq.n	8000be0 <__swsetup_r+0xbc>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60a3      	str	r3, [r4, #8]
 8000bce:	6963      	ldr	r3, [r4, #20]
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	61a3      	str	r3, [r4, #24]
 8000bd4:	6923      	ldr	r3, [r4, #16]
 8000bd6:	b943      	cbnz	r3, 8000bea <__swsetup_r+0xc6>
 8000bd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bdc:	d1ba      	bne.n	8000b54 <__swsetup_r+0x30>
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	0781      	lsls	r1, r0, #30
 8000be2:	bf58      	it	pl
 8000be4:	6963      	ldrpl	r3, [r4, #20]
 8000be6:	60a3      	str	r3, [r4, #8]
 8000be8:	e7f4      	b.n	8000bd4 <__swsetup_r+0xb0>
 8000bea:	2000      	movs	r0, #0
 8000bec:	e7f7      	b.n	8000bde <__swsetup_r+0xba>
 8000bee:	bf00      	nop
 8000bf0:	20000054 	.word	0x20000054
 8000bf4:	080013a8 	.word	0x080013a8
 8000bf8:	080013c8 	.word	0x080013c8
 8000bfc:	08001388 	.word	0x08001388

08000c00 <__sflush_r>:
 8000c00:	898a      	ldrh	r2, [r1, #12]
 8000c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c06:	4605      	mov	r5, r0
 8000c08:	0710      	lsls	r0, r2, #28
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	d458      	bmi.n	8000cc0 <__sflush_r+0xc0>
 8000c0e:	684b      	ldr	r3, [r1, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dc05      	bgt.n	8000c20 <__sflush_r+0x20>
 8000c14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	dc02      	bgt.n	8000c20 <__sflush_r+0x20>
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0f9      	beq.n	8000c1a <__sflush_r+0x1a>
 8000c26:	2300      	movs	r3, #0
 8000c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c2c:	682f      	ldr	r7, [r5, #0]
 8000c2e:	602b      	str	r3, [r5, #0]
 8000c30:	d032      	beq.n	8000c98 <__sflush_r+0x98>
 8000c32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c34:	89a3      	ldrh	r3, [r4, #12]
 8000c36:	075a      	lsls	r2, r3, #29
 8000c38:	d505      	bpl.n	8000c46 <__sflush_r+0x46>
 8000c3a:	6863      	ldr	r3, [r4, #4]
 8000c3c:	1ac0      	subs	r0, r0, r3
 8000c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c40:	b10b      	cbz	r3, 8000c46 <__sflush_r+0x46>
 8000c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c44:	1ac0      	subs	r0, r0, r3
 8000c46:	2300      	movs	r3, #0
 8000c48:	4602      	mov	r2, r0
 8000c4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c4c:	6a21      	ldr	r1, [r4, #32]
 8000c4e:	4628      	mov	r0, r5
 8000c50:	47b0      	blx	r6
 8000c52:	1c43      	adds	r3, r0, #1
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	d106      	bne.n	8000c66 <__sflush_r+0x66>
 8000c58:	6829      	ldr	r1, [r5, #0]
 8000c5a:	291d      	cmp	r1, #29
 8000c5c:	d82c      	bhi.n	8000cb8 <__sflush_r+0xb8>
 8000c5e:	4a2a      	ldr	r2, [pc, #168]	; (8000d08 <__sflush_r+0x108>)
 8000c60:	40ca      	lsrs	r2, r1
 8000c62:	07d6      	lsls	r6, r2, #31
 8000c64:	d528      	bpl.n	8000cb8 <__sflush_r+0xb8>
 8000c66:	2200      	movs	r2, #0
 8000c68:	6062      	str	r2, [r4, #4]
 8000c6a:	04d9      	lsls	r1, r3, #19
 8000c6c:	6922      	ldr	r2, [r4, #16]
 8000c6e:	6022      	str	r2, [r4, #0]
 8000c70:	d504      	bpl.n	8000c7c <__sflush_r+0x7c>
 8000c72:	1c42      	adds	r2, r0, #1
 8000c74:	d101      	bne.n	8000c7a <__sflush_r+0x7a>
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	b903      	cbnz	r3, 8000c7c <__sflush_r+0x7c>
 8000c7a:	6560      	str	r0, [r4, #84]	; 0x54
 8000c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c7e:	602f      	str	r7, [r5, #0]
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d0ca      	beq.n	8000c1a <__sflush_r+0x1a>
 8000c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d002      	beq.n	8000c92 <__sflush_r+0x92>
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f000 f9d5 	bl	800103c <_free_r>
 8000c92:	2000      	movs	r0, #0
 8000c94:	6360      	str	r0, [r4, #52]	; 0x34
 8000c96:	e7c1      	b.n	8000c1c <__sflush_r+0x1c>
 8000c98:	6a21      	ldr	r1, [r4, #32]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	47b0      	blx	r6
 8000ca0:	1c41      	adds	r1, r0, #1
 8000ca2:	d1c7      	bne.n	8000c34 <__sflush_r+0x34>
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0c4      	beq.n	8000c34 <__sflush_r+0x34>
 8000caa:	2b1d      	cmp	r3, #29
 8000cac:	d001      	beq.n	8000cb2 <__sflush_r+0xb2>
 8000cae:	2b16      	cmp	r3, #22
 8000cb0:	d101      	bne.n	8000cb6 <__sflush_r+0xb6>
 8000cb2:	602f      	str	r7, [r5, #0]
 8000cb4:	e7b1      	b.n	8000c1a <__sflush_r+0x1a>
 8000cb6:	89a3      	ldrh	r3, [r4, #12]
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	81a3      	strh	r3, [r4, #12]
 8000cbe:	e7ad      	b.n	8000c1c <__sflush_r+0x1c>
 8000cc0:	690f      	ldr	r7, [r1, #16]
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d0a9      	beq.n	8000c1a <__sflush_r+0x1a>
 8000cc6:	0793      	lsls	r3, r2, #30
 8000cc8:	680e      	ldr	r6, [r1, #0]
 8000cca:	bf08      	it	eq
 8000ccc:	694b      	ldreq	r3, [r1, #20]
 8000cce:	600f      	str	r7, [r1, #0]
 8000cd0:	bf18      	it	ne
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	eba6 0807 	sub.w	r8, r6, r7
 8000cd8:	608b      	str	r3, [r1, #8]
 8000cda:	f1b8 0f00 	cmp.w	r8, #0
 8000cde:	dd9c      	ble.n	8000c1a <__sflush_r+0x1a>
 8000ce0:	6a21      	ldr	r1, [r4, #32]
 8000ce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000ce4:	4643      	mov	r3, r8
 8000ce6:	463a      	mov	r2, r7
 8000ce8:	4628      	mov	r0, r5
 8000cea:	47b0      	blx	r6
 8000cec:	2800      	cmp	r0, #0
 8000cee:	dc06      	bgt.n	8000cfe <__sflush_r+0xfe>
 8000cf0:	89a3      	ldrh	r3, [r4, #12]
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf6:	81a3      	strh	r3, [r4, #12]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfc:	e78e      	b.n	8000c1c <__sflush_r+0x1c>
 8000cfe:	4407      	add	r7, r0
 8000d00:	eba8 0800 	sub.w	r8, r8, r0
 8000d04:	e7e9      	b.n	8000cda <__sflush_r+0xda>
 8000d06:	bf00      	nop
 8000d08:	20400001 	.word	0x20400001

08000d0c <_fflush_r>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	690b      	ldr	r3, [r1, #16]
 8000d10:	4605      	mov	r5, r0
 8000d12:	460c      	mov	r4, r1
 8000d14:	b913      	cbnz	r3, 8000d1c <_fflush_r+0x10>
 8000d16:	2500      	movs	r5, #0
 8000d18:	4628      	mov	r0, r5
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
 8000d1c:	b118      	cbz	r0, 8000d26 <_fflush_r+0x1a>
 8000d1e:	6983      	ldr	r3, [r0, #24]
 8000d20:	b90b      	cbnz	r3, 8000d26 <_fflush_r+0x1a>
 8000d22:	f000 f887 	bl	8000e34 <__sinit>
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <_fflush_r+0x6c>)
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d11b      	bne.n	8000d64 <_fflush_r+0x58>
 8000d2c:	686c      	ldr	r4, [r5, #4]
 8000d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0ef      	beq.n	8000d16 <_fflush_r+0xa>
 8000d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d38:	07d0      	lsls	r0, r2, #31
 8000d3a:	d404      	bmi.n	8000d46 <_fflush_r+0x3a>
 8000d3c:	0599      	lsls	r1, r3, #22
 8000d3e:	d402      	bmi.n	8000d46 <_fflush_r+0x3a>
 8000d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d42:	f000 f915 	bl	8000f70 <__retarget_lock_acquire_recursive>
 8000d46:	4628      	mov	r0, r5
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f7ff ff59 	bl	8000c00 <__sflush_r>
 8000d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d50:	07da      	lsls	r2, r3, #31
 8000d52:	4605      	mov	r5, r0
 8000d54:	d4e0      	bmi.n	8000d18 <_fflush_r+0xc>
 8000d56:	89a3      	ldrh	r3, [r4, #12]
 8000d58:	059b      	lsls	r3, r3, #22
 8000d5a:	d4dd      	bmi.n	8000d18 <_fflush_r+0xc>
 8000d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d5e:	f000 f908 	bl	8000f72 <__retarget_lock_release_recursive>
 8000d62:	e7d9      	b.n	8000d18 <_fflush_r+0xc>
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <_fflush_r+0x70>)
 8000d66:	429c      	cmp	r4, r3
 8000d68:	d101      	bne.n	8000d6e <_fflush_r+0x62>
 8000d6a:	68ac      	ldr	r4, [r5, #8]
 8000d6c:	e7df      	b.n	8000d2e <_fflush_r+0x22>
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <_fflush_r+0x74>)
 8000d70:	429c      	cmp	r4, r3
 8000d72:	bf08      	it	eq
 8000d74:	68ec      	ldreq	r4, [r5, #12]
 8000d76:	e7da      	b.n	8000d2e <_fflush_r+0x22>
 8000d78:	080013a8 	.word	0x080013a8
 8000d7c:	080013c8 	.word	0x080013c8
 8000d80:	08001388 	.word	0x08001388

08000d84 <std>:
 8000d84:	2300      	movs	r3, #0
 8000d86:	b510      	push	{r4, lr}
 8000d88:	4604      	mov	r4, r0
 8000d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8000d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d92:	6083      	str	r3, [r0, #8]
 8000d94:	8181      	strh	r1, [r0, #12]
 8000d96:	6643      	str	r3, [r0, #100]	; 0x64
 8000d98:	81c2      	strh	r2, [r0, #14]
 8000d9a:	6183      	str	r3, [r0, #24]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2208      	movs	r2, #8
 8000da0:	305c      	adds	r0, #92	; 0x5c
 8000da2:	f7ff fdef 	bl	8000984 <memset>
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <std+0x38>)
 8000da8:	6263      	str	r3, [r4, #36]	; 0x24
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <std+0x3c>)
 8000dac:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <std+0x40>)
 8000db0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <std+0x44>)
 8000db4:	6224      	str	r4, [r4, #32]
 8000db6:	6323      	str	r3, [r4, #48]	; 0x30
 8000db8:	bd10      	pop	{r4, pc}
 8000dba:	bf00      	nop
 8000dbc:	080011b1 	.word	0x080011b1
 8000dc0:	080011d3 	.word	0x080011d3
 8000dc4:	0800120b 	.word	0x0800120b
 8000dc8:	0800122f 	.word	0x0800122f

08000dcc <_cleanup_r>:
 8000dcc:	4901      	ldr	r1, [pc, #4]	; (8000dd4 <_cleanup_r+0x8>)
 8000dce:	f000 b8af 	b.w	8000f30 <_fwalk_reent>
 8000dd2:	bf00      	nop
 8000dd4:	08000d0d 	.word	0x08000d0d

08000dd8 <__sfmoreglue>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	1e4a      	subs	r2, r1, #1
 8000ddc:	2568      	movs	r5, #104	; 0x68
 8000dde:	4355      	muls	r5, r2
 8000de0:	460e      	mov	r6, r1
 8000de2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000de6:	f000 f979 	bl	80010dc <_malloc_r>
 8000dea:	4604      	mov	r4, r0
 8000dec:	b140      	cbz	r0, 8000e00 <__sfmoreglue+0x28>
 8000dee:	2100      	movs	r1, #0
 8000df0:	e9c0 1600 	strd	r1, r6, [r0]
 8000df4:	300c      	adds	r0, #12
 8000df6:	60a0      	str	r0, [r4, #8]
 8000df8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000dfc:	f7ff fdc2 	bl	8000984 <memset>
 8000e00:	4620      	mov	r0, r4
 8000e02:	bd70      	pop	{r4, r5, r6, pc}

08000e04 <__sfp_lock_acquire>:
 8000e04:	4801      	ldr	r0, [pc, #4]	; (8000e0c <__sfp_lock_acquire+0x8>)
 8000e06:	f000 b8b3 	b.w	8000f70 <__retarget_lock_acquire_recursive>
 8000e0a:	bf00      	nop
 8000e0c:	200000ec 	.word	0x200000ec

08000e10 <__sfp_lock_release>:
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <__sfp_lock_release+0x8>)
 8000e12:	f000 b8ae 	b.w	8000f72 <__retarget_lock_release_recursive>
 8000e16:	bf00      	nop
 8000e18:	200000ec 	.word	0x200000ec

08000e1c <__sinit_lock_acquire>:
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <__sinit_lock_acquire+0x8>)
 8000e1e:	f000 b8a7 	b.w	8000f70 <__retarget_lock_acquire_recursive>
 8000e22:	bf00      	nop
 8000e24:	200000e7 	.word	0x200000e7

08000e28 <__sinit_lock_release>:
 8000e28:	4801      	ldr	r0, [pc, #4]	; (8000e30 <__sinit_lock_release+0x8>)
 8000e2a:	f000 b8a2 	b.w	8000f72 <__retarget_lock_release_recursive>
 8000e2e:	bf00      	nop
 8000e30:	200000e7 	.word	0x200000e7

08000e34 <__sinit>:
 8000e34:	b510      	push	{r4, lr}
 8000e36:	4604      	mov	r4, r0
 8000e38:	f7ff fff0 	bl	8000e1c <__sinit_lock_acquire>
 8000e3c:	69a3      	ldr	r3, [r4, #24]
 8000e3e:	b11b      	cbz	r3, 8000e48 <__sinit+0x14>
 8000e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e44:	f7ff bff0 	b.w	8000e28 <__sinit_lock_release>
 8000e48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e4c:	6523      	str	r3, [r4, #80]	; 0x50
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <__sinit+0x68>)
 8000e50:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <__sinit+0x6c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	bf04      	itt	eq
 8000e5a:	2301      	moveq	r3, #1
 8000e5c:	61a3      	streq	r3, [r4, #24]
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f000 f820 	bl	8000ea4 <__sfp>
 8000e64:	6060      	str	r0, [r4, #4]
 8000e66:	4620      	mov	r0, r4
 8000e68:	f000 f81c 	bl	8000ea4 <__sfp>
 8000e6c:	60a0      	str	r0, [r4, #8]
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f000 f818 	bl	8000ea4 <__sfp>
 8000e74:	2200      	movs	r2, #0
 8000e76:	60e0      	str	r0, [r4, #12]
 8000e78:	2104      	movs	r1, #4
 8000e7a:	6860      	ldr	r0, [r4, #4]
 8000e7c:	f7ff ff82 	bl	8000d84 <std>
 8000e80:	68a0      	ldr	r0, [r4, #8]
 8000e82:	2201      	movs	r2, #1
 8000e84:	2109      	movs	r1, #9
 8000e86:	f7ff ff7d 	bl	8000d84 <std>
 8000e8a:	68e0      	ldr	r0, [r4, #12]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	2112      	movs	r1, #18
 8000e90:	f7ff ff78 	bl	8000d84 <std>
 8000e94:	2301      	movs	r3, #1
 8000e96:	61a3      	str	r3, [r4, #24]
 8000e98:	e7d2      	b.n	8000e40 <__sinit+0xc>
 8000e9a:	bf00      	nop
 8000e9c:	08001384 	.word	0x08001384
 8000ea0:	08000dcd 	.word	0x08000dcd

08000ea4 <__sfp>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	4607      	mov	r7, r0
 8000ea8:	f7ff ffac 	bl	8000e04 <__sfp_lock_acquire>
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <__sfp+0x84>)
 8000eae:	681e      	ldr	r6, [r3, #0]
 8000eb0:	69b3      	ldr	r3, [r6, #24]
 8000eb2:	b913      	cbnz	r3, 8000eba <__sfp+0x16>
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f7ff ffbd 	bl	8000e34 <__sinit>
 8000eba:	3648      	adds	r6, #72	; 0x48
 8000ebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	d503      	bpl.n	8000ecc <__sfp+0x28>
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	b30b      	cbz	r3, 8000f0c <__sfp+0x68>
 8000ec8:	6836      	ldr	r6, [r6, #0]
 8000eca:	e7f7      	b.n	8000ebc <__sfp+0x18>
 8000ecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ed0:	b9d5      	cbnz	r5, 8000f08 <__sfp+0x64>
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <__sfp+0x88>)
 8000ed4:	60e3      	str	r3, [r4, #12]
 8000ed6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000eda:	6665      	str	r5, [r4, #100]	; 0x64
 8000edc:	f000 f847 	bl	8000f6e <__retarget_lock_init_recursive>
 8000ee0:	f7ff ff96 	bl	8000e10 <__sfp_lock_release>
 8000ee4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ee8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000eec:	6025      	str	r5, [r4, #0]
 8000eee:	61a5      	str	r5, [r4, #24]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ef8:	f7ff fd44 	bl	8000984 <memset>
 8000efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f04:	4620      	mov	r0, r4
 8000f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f08:	3468      	adds	r4, #104	; 0x68
 8000f0a:	e7d9      	b.n	8000ec0 <__sfp+0x1c>
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4638      	mov	r0, r7
 8000f10:	f7ff ff62 	bl	8000dd8 <__sfmoreglue>
 8000f14:	4604      	mov	r4, r0
 8000f16:	6030      	str	r0, [r6, #0]
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d1d5      	bne.n	8000ec8 <__sfp+0x24>
 8000f1c:	f7ff ff78 	bl	8000e10 <__sfp_lock_release>
 8000f20:	230c      	movs	r3, #12
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	e7ee      	b.n	8000f04 <__sfp+0x60>
 8000f26:	bf00      	nop
 8000f28:	08001384 	.word	0x08001384
 8000f2c:	ffff0001 	.word	0xffff0001

08000f30 <_fwalk_reent>:
 8000f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f34:	4606      	mov	r6, r0
 8000f36:	4688      	mov	r8, r1
 8000f38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f3c:	2700      	movs	r7, #0
 8000f3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f42:	f1b9 0901 	subs.w	r9, r9, #1
 8000f46:	d505      	bpl.n	8000f54 <_fwalk_reent+0x24>
 8000f48:	6824      	ldr	r4, [r4, #0]
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d1f7      	bne.n	8000f3e <_fwalk_reent+0xe>
 8000f4e:	4638      	mov	r0, r7
 8000f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f54:	89ab      	ldrh	r3, [r5, #12]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d907      	bls.n	8000f6a <_fwalk_reent+0x3a>
 8000f5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	d003      	beq.n	8000f6a <_fwalk_reent+0x3a>
 8000f62:	4629      	mov	r1, r5
 8000f64:	4630      	mov	r0, r6
 8000f66:	47c0      	blx	r8
 8000f68:	4307      	orrs	r7, r0
 8000f6a:	3568      	adds	r5, #104	; 0x68
 8000f6c:	e7e9      	b.n	8000f42 <_fwalk_reent+0x12>

08000f6e <__retarget_lock_init_recursive>:
 8000f6e:	4770      	bx	lr

08000f70 <__retarget_lock_acquire_recursive>:
 8000f70:	4770      	bx	lr

08000f72 <__retarget_lock_release_recursive>:
 8000f72:	4770      	bx	lr

08000f74 <__swhatbuf_r>:
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	460e      	mov	r6, r1
 8000f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f7c:	2900      	cmp	r1, #0
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	4614      	mov	r4, r2
 8000f82:	461d      	mov	r5, r3
 8000f84:	da07      	bge.n	8000f96 <__swhatbuf_r+0x22>
 8000f86:	2300      	movs	r3, #0
 8000f88:	602b      	str	r3, [r5, #0]
 8000f8a:	89b3      	ldrh	r3, [r6, #12]
 8000f8c:	061a      	lsls	r2, r3, #24
 8000f8e:	d410      	bmi.n	8000fb2 <__swhatbuf_r+0x3e>
 8000f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f94:	e00e      	b.n	8000fb4 <__swhatbuf_r+0x40>
 8000f96:	466a      	mov	r2, sp
 8000f98:	f000 f970 	bl	800127c <_fstat_r>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	dbf2      	blt.n	8000f86 <__swhatbuf_r+0x12>
 8000fa0:	9a01      	ldr	r2, [sp, #4]
 8000fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000faa:	425a      	negs	r2, r3
 8000fac:	415a      	adcs	r2, r3
 8000fae:	602a      	str	r2, [r5, #0]
 8000fb0:	e7ee      	b.n	8000f90 <__swhatbuf_r+0x1c>
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	6023      	str	r3, [r4, #0]
 8000fb8:	b016      	add	sp, #88	; 0x58
 8000fba:	bd70      	pop	{r4, r5, r6, pc}

08000fbc <__smakebuf_r>:
 8000fbc:	898b      	ldrh	r3, [r1, #12]
 8000fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fc0:	079d      	lsls	r5, r3, #30
 8000fc2:	4606      	mov	r6, r0
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	d507      	bpl.n	8000fd8 <__smakebuf_r+0x1c>
 8000fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	6123      	str	r3, [r4, #16]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	6163      	str	r3, [r4, #20]
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	ab01      	add	r3, sp, #4
 8000fda:	466a      	mov	r2, sp
 8000fdc:	f7ff ffca 	bl	8000f74 <__swhatbuf_r>
 8000fe0:	9900      	ldr	r1, [sp, #0]
 8000fe2:	4605      	mov	r5, r0
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	f000 f879 	bl	80010dc <_malloc_r>
 8000fea:	b948      	cbnz	r0, 8001000 <__smakebuf_r+0x44>
 8000fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ff0:	059a      	lsls	r2, r3, #22
 8000ff2:	d4ef      	bmi.n	8000fd4 <__smakebuf_r+0x18>
 8000ff4:	f023 0303 	bic.w	r3, r3, #3
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	81a3      	strh	r3, [r4, #12]
 8000ffe:	e7e3      	b.n	8000fc8 <__smakebuf_r+0xc>
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <__smakebuf_r+0x7c>)
 8001002:	62b3      	str	r3, [r6, #40]	; 0x28
 8001004:	89a3      	ldrh	r3, [r4, #12]
 8001006:	6020      	str	r0, [r4, #0]
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	81a3      	strh	r3, [r4, #12]
 800100e:	9b00      	ldr	r3, [sp, #0]
 8001010:	6163      	str	r3, [r4, #20]
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	6120      	str	r0, [r4, #16]
 8001016:	b15b      	cbz	r3, 8001030 <__smakebuf_r+0x74>
 8001018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800101c:	4630      	mov	r0, r6
 800101e:	f000 f93f 	bl	80012a0 <_isatty_r>
 8001022:	b128      	cbz	r0, 8001030 <__smakebuf_r+0x74>
 8001024:	89a3      	ldrh	r3, [r4, #12]
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	81a3      	strh	r3, [r4, #12]
 8001030:	89a0      	ldrh	r0, [r4, #12]
 8001032:	4305      	orrs	r5, r0
 8001034:	81a5      	strh	r5, [r4, #12]
 8001036:	e7cd      	b.n	8000fd4 <__smakebuf_r+0x18>
 8001038:	08000dcd 	.word	0x08000dcd

0800103c <_free_r>:
 800103c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800103e:	2900      	cmp	r1, #0
 8001040:	d048      	beq.n	80010d4 <_free_r+0x98>
 8001042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001046:	9001      	str	r0, [sp, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f1a1 0404 	sub.w	r4, r1, #4
 800104e:	bfb8      	it	lt
 8001050:	18e4      	addlt	r4, r4, r3
 8001052:	f000 f947 	bl	80012e4 <__malloc_lock>
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <_free_r+0x9c>)
 8001058:	9801      	ldr	r0, [sp, #4]
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	4615      	mov	r5, r2
 800105e:	b933      	cbnz	r3, 800106e <_free_r+0x32>
 8001060:	6063      	str	r3, [r4, #4]
 8001062:	6014      	str	r4, [r2, #0]
 8001064:	b003      	add	sp, #12
 8001066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800106a:	f000 b941 	b.w	80012f0 <__malloc_unlock>
 800106e:	42a3      	cmp	r3, r4
 8001070:	d90b      	bls.n	800108a <_free_r+0x4e>
 8001072:	6821      	ldr	r1, [r4, #0]
 8001074:	1862      	adds	r2, r4, r1
 8001076:	4293      	cmp	r3, r2
 8001078:	bf04      	itt	eq
 800107a:	681a      	ldreq	r2, [r3, #0]
 800107c:	685b      	ldreq	r3, [r3, #4]
 800107e:	6063      	str	r3, [r4, #4]
 8001080:	bf04      	itt	eq
 8001082:	1852      	addeq	r2, r2, r1
 8001084:	6022      	streq	r2, [r4, #0]
 8001086:	602c      	str	r4, [r5, #0]
 8001088:	e7ec      	b.n	8001064 <_free_r+0x28>
 800108a:	461a      	mov	r2, r3
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	b10b      	cbz	r3, 8001094 <_free_r+0x58>
 8001090:	42a3      	cmp	r3, r4
 8001092:	d9fa      	bls.n	800108a <_free_r+0x4e>
 8001094:	6811      	ldr	r1, [r2, #0]
 8001096:	1855      	adds	r5, r2, r1
 8001098:	42a5      	cmp	r5, r4
 800109a:	d10b      	bne.n	80010b4 <_free_r+0x78>
 800109c:	6824      	ldr	r4, [r4, #0]
 800109e:	4421      	add	r1, r4
 80010a0:	1854      	adds	r4, r2, r1
 80010a2:	42a3      	cmp	r3, r4
 80010a4:	6011      	str	r1, [r2, #0]
 80010a6:	d1dd      	bne.n	8001064 <_free_r+0x28>
 80010a8:	681c      	ldr	r4, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	6053      	str	r3, [r2, #4]
 80010ae:	4421      	add	r1, r4
 80010b0:	6011      	str	r1, [r2, #0]
 80010b2:	e7d7      	b.n	8001064 <_free_r+0x28>
 80010b4:	d902      	bls.n	80010bc <_free_r+0x80>
 80010b6:	230c      	movs	r3, #12
 80010b8:	6003      	str	r3, [r0, #0]
 80010ba:	e7d3      	b.n	8001064 <_free_r+0x28>
 80010bc:	6825      	ldr	r5, [r4, #0]
 80010be:	1961      	adds	r1, r4, r5
 80010c0:	428b      	cmp	r3, r1
 80010c2:	bf04      	itt	eq
 80010c4:	6819      	ldreq	r1, [r3, #0]
 80010c6:	685b      	ldreq	r3, [r3, #4]
 80010c8:	6063      	str	r3, [r4, #4]
 80010ca:	bf04      	itt	eq
 80010cc:	1949      	addeq	r1, r1, r5
 80010ce:	6021      	streq	r1, [r4, #0]
 80010d0:	6054      	str	r4, [r2, #4]
 80010d2:	e7c7      	b.n	8001064 <_free_r+0x28>
 80010d4:	b003      	add	sp, #12
 80010d6:	bd30      	pop	{r4, r5, pc}
 80010d8:	200000d8 	.word	0x200000d8

080010dc <_malloc_r>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	1ccd      	adds	r5, r1, #3
 80010e0:	f025 0503 	bic.w	r5, r5, #3
 80010e4:	3508      	adds	r5, #8
 80010e6:	2d0c      	cmp	r5, #12
 80010e8:	bf38      	it	cc
 80010ea:	250c      	movcc	r5, #12
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	4606      	mov	r6, r0
 80010f0:	db01      	blt.n	80010f6 <_malloc_r+0x1a>
 80010f2:	42a9      	cmp	r1, r5
 80010f4:	d903      	bls.n	80010fe <_malloc_r+0x22>
 80010f6:	230c      	movs	r3, #12
 80010f8:	6033      	str	r3, [r6, #0]
 80010fa:	2000      	movs	r0, #0
 80010fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010fe:	f000 f8f1 	bl	80012e4 <__malloc_lock>
 8001102:	4921      	ldr	r1, [pc, #132]	; (8001188 <_malloc_r+0xac>)
 8001104:	680a      	ldr	r2, [r1, #0]
 8001106:	4614      	mov	r4, r2
 8001108:	b99c      	cbnz	r4, 8001132 <_malloc_r+0x56>
 800110a:	4f20      	ldr	r7, [pc, #128]	; (800118c <_malloc_r+0xb0>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b923      	cbnz	r3, 800111a <_malloc_r+0x3e>
 8001110:	4621      	mov	r1, r4
 8001112:	4630      	mov	r0, r6
 8001114:	f000 f83c 	bl	8001190 <_sbrk_r>
 8001118:	6038      	str	r0, [r7, #0]
 800111a:	4629      	mov	r1, r5
 800111c:	4630      	mov	r0, r6
 800111e:	f000 f837 	bl	8001190 <_sbrk_r>
 8001122:	1c43      	adds	r3, r0, #1
 8001124:	d123      	bne.n	800116e <_malloc_r+0x92>
 8001126:	230c      	movs	r3, #12
 8001128:	6033      	str	r3, [r6, #0]
 800112a:	4630      	mov	r0, r6
 800112c:	f000 f8e0 	bl	80012f0 <__malloc_unlock>
 8001130:	e7e3      	b.n	80010fa <_malloc_r+0x1e>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	1b5b      	subs	r3, r3, r5
 8001136:	d417      	bmi.n	8001168 <_malloc_r+0x8c>
 8001138:	2b0b      	cmp	r3, #11
 800113a:	d903      	bls.n	8001144 <_malloc_r+0x68>
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	441c      	add	r4, r3
 8001140:	6025      	str	r5, [r4, #0]
 8001142:	e004      	b.n	800114e <_malloc_r+0x72>
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	42a2      	cmp	r2, r4
 8001148:	bf0c      	ite	eq
 800114a:	600b      	streq	r3, [r1, #0]
 800114c:	6053      	strne	r3, [r2, #4]
 800114e:	4630      	mov	r0, r6
 8001150:	f000 f8ce 	bl	80012f0 <__malloc_unlock>
 8001154:	f104 000b 	add.w	r0, r4, #11
 8001158:	1d23      	adds	r3, r4, #4
 800115a:	f020 0007 	bic.w	r0, r0, #7
 800115e:	1ac2      	subs	r2, r0, r3
 8001160:	d0cc      	beq.n	80010fc <_malloc_r+0x20>
 8001162:	1a1b      	subs	r3, r3, r0
 8001164:	50a3      	str	r3, [r4, r2]
 8001166:	e7c9      	b.n	80010fc <_malloc_r+0x20>
 8001168:	4622      	mov	r2, r4
 800116a:	6864      	ldr	r4, [r4, #4]
 800116c:	e7cc      	b.n	8001108 <_malloc_r+0x2c>
 800116e:	1cc4      	adds	r4, r0, #3
 8001170:	f024 0403 	bic.w	r4, r4, #3
 8001174:	42a0      	cmp	r0, r4
 8001176:	d0e3      	beq.n	8001140 <_malloc_r+0x64>
 8001178:	1a21      	subs	r1, r4, r0
 800117a:	4630      	mov	r0, r6
 800117c:	f000 f808 	bl	8001190 <_sbrk_r>
 8001180:	3001      	adds	r0, #1
 8001182:	d1dd      	bne.n	8001140 <_malloc_r+0x64>
 8001184:	e7cf      	b.n	8001126 <_malloc_r+0x4a>
 8001186:	bf00      	nop
 8001188:	200000d8 	.word	0x200000d8
 800118c:	200000dc 	.word	0x200000dc

08001190 <_sbrk_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4d06      	ldr	r5, [pc, #24]	; (80011ac <_sbrk_r+0x1c>)
 8001194:	2300      	movs	r3, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	f7ff fb68 	bl	8000870 <_sbrk>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_sbrk_r+0x1a>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_sbrk_r+0x1a>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	200000f0 	.word	0x200000f0

080011b0 <__sread>:
 80011b0:	b510      	push	{r4, lr}
 80011b2:	460c      	mov	r4, r1
 80011b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b8:	f000 f8a0 	bl	80012fc <_read_r>
 80011bc:	2800      	cmp	r0, #0
 80011be:	bfab      	itete	ge
 80011c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011c2:	89a3      	ldrhlt	r3, [r4, #12]
 80011c4:	181b      	addge	r3, r3, r0
 80011c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011ca:	bfac      	ite	ge
 80011cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80011ce:	81a3      	strhlt	r3, [r4, #12]
 80011d0:	bd10      	pop	{r4, pc}

080011d2 <__swrite>:
 80011d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d6:	461f      	mov	r7, r3
 80011d8:	898b      	ldrh	r3, [r1, #12]
 80011da:	05db      	lsls	r3, r3, #23
 80011dc:	4605      	mov	r5, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4616      	mov	r6, r2
 80011e2:	d505      	bpl.n	80011f0 <__swrite+0x1e>
 80011e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e8:	2302      	movs	r3, #2
 80011ea:	2200      	movs	r2, #0
 80011ec:	f000 f868 	bl	80012c0 <_lseek_r>
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011fa:	81a3      	strh	r3, [r4, #12]
 80011fc:	4632      	mov	r2, r6
 80011fe:	463b      	mov	r3, r7
 8001200:	4628      	mov	r0, r5
 8001202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001206:	f000 b817 	b.w	8001238 <_write_r>

0800120a <__sseek>:
 800120a:	b510      	push	{r4, lr}
 800120c:	460c      	mov	r4, r1
 800120e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001212:	f000 f855 	bl	80012c0 <_lseek_r>
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	bf15      	itete	ne
 800121c:	6560      	strne	r0, [r4, #84]	; 0x54
 800121e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001226:	81a3      	strheq	r3, [r4, #12]
 8001228:	bf18      	it	ne
 800122a:	81a3      	strhne	r3, [r4, #12]
 800122c:	bd10      	pop	{r4, pc}

0800122e <__sclose>:
 800122e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001232:	f000 b813 	b.w	800125c <_close_r>
	...

08001238 <_write_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4d07      	ldr	r5, [pc, #28]	; (8001258 <_write_r+0x20>)
 800123c:	4604      	mov	r4, r0
 800123e:	4608      	mov	r0, r1
 8001240:	4611      	mov	r1, r2
 8001242:	2200      	movs	r2, #0
 8001244:	602a      	str	r2, [r5, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	f7ff fac1 	bl	80007ce <_write>
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	d102      	bne.n	8001256 <_write_r+0x1e>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	b103      	cbz	r3, 8001256 <_write_r+0x1e>
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	bd38      	pop	{r3, r4, r5, pc}
 8001258:	200000f0 	.word	0x200000f0

0800125c <_close_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d06      	ldr	r5, [pc, #24]	; (8001278 <_close_r+0x1c>)
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	f7ff facd 	bl	8000806 <_close>
 800126c:	1c43      	adds	r3, r0, #1
 800126e:	d102      	bne.n	8001276 <_close_r+0x1a>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b103      	cbz	r3, 8001276 <_close_r+0x1a>
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	200000f0 	.word	0x200000f0

0800127c <_fstat_r>:
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4d07      	ldr	r5, [pc, #28]	; (800129c <_fstat_r+0x20>)
 8001280:	2300      	movs	r3, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	602b      	str	r3, [r5, #0]
 800128a:	f7ff fac8 	bl	800081e <_fstat>
 800128e:	1c43      	adds	r3, r0, #1
 8001290:	d102      	bne.n	8001298 <_fstat_r+0x1c>
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	b103      	cbz	r3, 8001298 <_fstat_r+0x1c>
 8001296:	6023      	str	r3, [r4, #0]
 8001298:	bd38      	pop	{r3, r4, r5, pc}
 800129a:	bf00      	nop
 800129c:	200000f0 	.word	0x200000f0

080012a0 <_isatty_r>:
 80012a0:	b538      	push	{r3, r4, r5, lr}
 80012a2:	4d06      	ldr	r5, [pc, #24]	; (80012bc <_isatty_r+0x1c>)
 80012a4:	2300      	movs	r3, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	4608      	mov	r0, r1
 80012aa:	602b      	str	r3, [r5, #0]
 80012ac:	f7ff fac7 	bl	800083e <_isatty>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	d102      	bne.n	80012ba <_isatty_r+0x1a>
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	b103      	cbz	r3, 80012ba <_isatty_r+0x1a>
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
 80012bc:	200000f0 	.word	0x200000f0

080012c0 <_lseek_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4d07      	ldr	r5, [pc, #28]	; (80012e0 <_lseek_r+0x20>)
 80012c4:	4604      	mov	r4, r0
 80012c6:	4608      	mov	r0, r1
 80012c8:	4611      	mov	r1, r2
 80012ca:	2200      	movs	r2, #0
 80012cc:	602a      	str	r2, [r5, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	f7ff fac0 	bl	8000854 <_lseek>
 80012d4:	1c43      	adds	r3, r0, #1
 80012d6:	d102      	bne.n	80012de <_lseek_r+0x1e>
 80012d8:	682b      	ldr	r3, [r5, #0]
 80012da:	b103      	cbz	r3, 80012de <_lseek_r+0x1e>
 80012dc:	6023      	str	r3, [r4, #0]
 80012de:	bd38      	pop	{r3, r4, r5, pc}
 80012e0:	200000f0 	.word	0x200000f0

080012e4 <__malloc_lock>:
 80012e4:	4801      	ldr	r0, [pc, #4]	; (80012ec <__malloc_lock+0x8>)
 80012e6:	f7ff be43 	b.w	8000f70 <__retarget_lock_acquire_recursive>
 80012ea:	bf00      	nop
 80012ec:	200000e8 	.word	0x200000e8

080012f0 <__malloc_unlock>:
 80012f0:	4801      	ldr	r0, [pc, #4]	; (80012f8 <__malloc_unlock+0x8>)
 80012f2:	f7ff be3e 	b.w	8000f72 <__retarget_lock_release_recursive>
 80012f6:	bf00      	nop
 80012f8:	200000e8 	.word	0x200000e8

080012fc <_read_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4d07      	ldr	r5, [pc, #28]	; (800131c <_read_r+0x20>)
 8001300:	4604      	mov	r4, r0
 8001302:	4608      	mov	r0, r1
 8001304:	4611      	mov	r1, r2
 8001306:	2200      	movs	r2, #0
 8001308:	602a      	str	r2, [r5, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	f7ff fa42 	bl	8000794 <_read>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	d102      	bne.n	800131a <_read_r+0x1e>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	b103      	cbz	r3, 800131a <_read_r+0x1e>
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	200000f0 	.word	0x200000f0

08001320 <_init>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	bf00      	nop
 8001324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001326:	bc08      	pop	{r3}
 8001328:	469e      	mov	lr, r3
 800132a:	4770      	bx	lr

0800132c <_fini>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr
